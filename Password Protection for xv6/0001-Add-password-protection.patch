From 401ba867564e5c33d7739d110137a55a973d73fe Mon Sep 17 00:00:00 2001
From: Selina Zhang <yz4184@nyu.edu>
Date: Thu, 9 May 2019 03:36:33 -0400
Subject: [PATCH] Add password protection

---
 bcrypt.c |  3 +--
 init.c   | 80 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 81 insertions(+), 2 deletions(-)

diff --git a/bcrypt.c b/bcrypt.c
index 603a7ec..df14dbe 100644
--- a/bcrypt.c
+++ b/bcrypt.c
@@ -131,7 +131,7 @@ bcrypt_checkpass(const char *pass, const uchar *salt, const uchar *goodhash)
 	if (timingsafe_bcmp(hash, goodhash, BCRYPT_HASHLEN) != 0) {
 		return -1;
 	}
-
+  
 	memset(hash, 0, sizeof(hash));
 	return 0;
 }
@@ -146,6 +146,5 @@ bcrypt(const char *pass, const uchar *salt)
 
 	if (bcrypt_hashpass(pass, salt, gencrypted, BCRYPT_DEFAULT_LOGR) != 0)
 		return NULL;
-
 	return gencrypted;
 }
diff --git a/init.c b/init.c
index 046b551..3cd3e34 100644
--- a/init.c
+++ b/init.c
@@ -4,9 +4,69 @@
 #include "stat.h"
 #include "user.h"
 #include "fcntl.h"
+#include "bcrypt.h"
+#define max_buffer 50
+
 
 char *argv[] = { "sh", 0 };
 
+void setPassword(int fd){
+  char newPassword[max_buffer];
+  char confirmPassword[max_buffer];
+  int saltNums[4];
+  uchar salt[16];
+  uchar * crypted;
+  int i, j;
+
+  printf(0, "Create a new password: ");
+  gets(newPassword, max_buffer);
+  printf(0, "Re-enter to confirm: ");
+  gets(confirmPassword, max_buffer);
+  if (strcmp(newPassword, confirmPassword) == 0) {
+    printf(0, "Password successfully set. You may now use it to log in.\n");
+    for (i = 0; i < 4; i++) {  // 128/32 = 4
+        saltNums[i] = random();
+    }
+    for (j = 0; j < 16; j+=4) {
+      *((int*)salt+j) = saltNums[j/4];
+    }   
+    crypted = bcrypt(newPassword, salt);
+    write(fd, salt, BCRYPT_HASHLEN);
+    write(fd, crypted, BCRYPT_HASHLEN);
+
+  }
+  else{
+    printf(0, "Passwords do not match. Try again.\n");
+    setPassword(fd);
+
+  }
+}
+
+void login(){
+    int fd = open("password_storage", O_RDONLY);
+
+
+    uchar salt[BCRYPT_HASHLEN];
+    read(fd, salt, BCRYPT_HASHLEN);
+    uchar crypted[BCRYPT_HASHLEN];
+    read(fd, crypted, BCRYPT_HASHLEN);
+
+    char password [max_buffer];
+
+    printf(0, "Enter password:");
+    gets(password, max_buffer);
+
+    while (bcrypt_checkpass(password, salt, crypted) != 0) {
+        printf(0, "Invalid attempt. Try again.\n");
+        printf(0, "Enter password:");
+        gets(password, max_buffer);
+    }
+    printf(0, "Password correct, logging you in.\n");
+
+
+}
+
+
 int
 main(void)
 {
@@ -19,6 +79,24 @@ main(void)
   dup(0);  // stdout
   dup(0);  // stderr
 
+
+// password section
+
+ int fd = open("password_storage", O_RDWR);
+ if (fd < 0) {
+    close(fd);
+    fd = open("password_storage", O_CREATE|O_RDWR);
+    printf(0, "No password set. Please set one.\n");
+    setPassword(fd);
+ }
+ 
+ login();
+ 
+ close(fd);
+
+
+// pass password
+
   for(;;){
     printf(1, "init: starting sh\n");
     pid = fork();
@@ -35,3 +113,5 @@ main(void)
       printf(1, "zombie!\n");
   }
 }
+
+
-- 
2.17.2 (Apple Git-113)

